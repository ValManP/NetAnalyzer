package ui;

import core.model.controllers.NetworkController;
import core.model.controllers.StorageController;
import core.model.inventory.NetworkElement;
import core.model.inventory.impl.networkelement.EmptyElement;
import core.model.inventory.impl.networkelement.RootNetworkElement;
import core.model.inventory.impl.networkelement.SwitchNetworkElement;
import core.model.inventory.impl.networkelement.UserNetworkElement;
import core.model.inventory.impl.storage.Device;
import core.model.inventory.impl.storage.DoubleStorage;
import core.model.network.impl.DoubleLink;
import core.model.network.impl.DoubleNetwork;
import ui.tools.Logger;
import ui.tools.UIValidator;
import ui.tools.UIVisualizator;

import java.awt.*;

public class NetworkPanel extends javax.swing.JPanel {
    private final Logger logger;
    
    private DoubleStorage storage;
    private DoubleNetwork network;

    /**
     * Creates new form NetworkPanel
     * @param storage
     * @param network
     */
    public NetworkPanel(DoubleStorage storage, DoubleNetwork network) {
        initComponents();
        this.storage = storage;
        this.network = network;
        this.logger = Logger.getLogger(logTextArea);
        networkVisualizationPanel.setLayout(new BorderLayout());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        storageCreationPanel = new javax.swing.JPanel();
        manualStorageCreationPanel = new javax.swing.JPanel();
        removeDevicePanel = new javax.swing.JPanel();
        removeDeviceLabel = new javax.swing.JLabel();
        removeDeviceButton = new javax.swing.JButton();
        removeDeviceComboBox = new javax.swing.JComboBox<>();
        addDevicePanel = new javax.swing.JPanel();
        deviceNameLabel = new javax.swing.JLabel();
        deviceNameTextField = new javax.swing.JTextField();
        deviceCapacityLabel = new javax.swing.JLabel();
        devicePriceLabel = new javax.swing.JLabel();
        addDeviceButton = new javax.swing.JButton();
        deviceCapacitySpinner = new javax.swing.JSpinner();
        devicePriceSpinner = new javax.swing.JSpinner();
        autoStorageCreationPanel = new javax.swing.JPanel();
        storageSizeLabel = new javax.swing.JLabel();
        minCapacityLabel = new javax.swing.JLabel();
        minPriceLabel = new javax.swing.JLabel();
        maxCapacityLabel = new javax.swing.JLabel();
        maxPriceLabel = new javax.swing.JLabel();
        generateStorageButton = new javax.swing.JButton();
        maxCapacitySpinner = new javax.swing.JSpinner();
        minPriceSpinner = new javax.swing.JSpinner();
        maxPriceSpinner = new javax.swing.JSpinner();
        minCapacitySpinner = new javax.swing.JSpinner();
        storageSizeSpinner = new javax.swing.JSpinner();
        networkVisualizationPanel = new javax.swing.JPanel();
        logPanel = new javax.swing.JPanel();
        logScrollPane = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        networkCreationPanel = new javax.swing.JPanel();
        manualNetworkCreationPanel = new javax.swing.JPanel();
        addLinkPanel = new javax.swing.JPanel();
        neALabel = new javax.swing.JLabel();
        neAComboBox = new javax.swing.JComboBox<>();
        addLinkButton = new javax.swing.JButton();
        neZLabel = new javax.swing.JLabel();
        neZComboBox = new javax.swing.JComboBox<>();
        isDuplexCheckBox = new javax.swing.JCheckBox();
        addNetworkElementPanel = new javax.swing.JPanel();
        neTypeLabel = new javax.swing.JLabel();
        neCapacityLabel = new javax.swing.JLabel();
        neNameLabel = new javax.swing.JLabel();
        neNameTextField = new javax.swing.JTextField();
        addNetworkElementButton = new javax.swing.JButton();
        neTypeComboBox = new javax.swing.JComboBox<>();
        neCapacitySpinner = new javax.swing.JSpinner();
        autoNetworkCreationPanel = new javax.swing.JPanel();
        layersCountLabel = new javax.swing.JLabel();
        neMinPriceLabel = new javax.swing.JLabel();
        layerLengthLabel = new javax.swing.JLabel();
        neMaxCapacityLabel = new javax.swing.JLabel();
        generateNetworkButton = new javax.swing.JButton();
        layersCountSpinner = new javax.swing.JSpinner();
        layerSizeSpinner = new javax.swing.JSpinner();
        neMaxPriceSpinner = new javax.swing.JSpinner();
        neMinPriceSpinner = new javax.swing.JSpinner();

        setBackground(new java.awt.Color(255, 255, 255));

        storageCreationPanel.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderHighlight"));
        storageCreationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Storage Creation"));

        manualStorageCreationPanel.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderHighlight"));
        manualStorageCreationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Manual"));

        removeDevicePanel.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderHighlight"));
        removeDevicePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Remove Device"));

        removeDeviceLabel.setText("Devices:");

        removeDeviceButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.highlight"));
        removeDeviceButton.setText("Remove");
        removeDeviceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDeviceButtonActionPerformed(evt);
            }
        });

        removeDeviceComboBox.setToolTipText("");

        javax.swing.GroupLayout removeDevicePanelLayout = new javax.swing.GroupLayout(removeDevicePanel);
        removeDevicePanel.setLayout(removeDevicePanelLayout);
        removeDevicePanelLayout.setHorizontalGroup(
                removeDevicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(removeDevicePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(removeDeviceLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeDeviceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeDeviceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        removeDevicePanelLayout.setVerticalGroup(
                removeDevicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(removeDevicePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(removeDevicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(removeDevicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(removeDeviceLabel)
                                                .addComponent(removeDeviceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(removeDeviceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addContainerGap(16, Short.MAX_VALUE))
        );

        addDevicePanel.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderHighlight"));
        addDevicePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Add Device"));

        deviceNameLabel.setText("Device Name:");

        deviceCapacityLabel.setText("Capacity:");

        devicePriceLabel.setText("Price:");

        addDeviceButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.highlight"));
        addDeviceButton.setText("Add");
        addDeviceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDeviceButtonActionPerformed(evt);
            }
        });

        deviceCapacitySpinner.setModel(new javax.swing.SpinnerNumberModel(100.0d, null, null, 1.0d));

        devicePriceSpinner.setModel(new javax.swing.SpinnerNumberModel(1.0d, null, null, 1.0d));

        javax.swing.GroupLayout addDevicePanelLayout = new javax.swing.GroupLayout(addDevicePanel);
        addDevicePanel.setLayout(addDevicePanelLayout);
        addDevicePanelLayout.setHorizontalGroup(
                addDevicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addDevicePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(addDevicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(addDevicePanelLayout.createSequentialGroup()
                                                .addComponent(deviceNameLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(deviceNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(addDeviceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(addDevicePanelLayout.createSequentialGroup()
                                                .addComponent(deviceCapacityLabel)
                                                .addGap(12, 12, 12)
                                                .addComponent(deviceCapacitySpinner)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(devicePriceLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(devicePriceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        addDevicePanelLayout.setVerticalGroup(
                addDevicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addDevicePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(addDevicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(addDevicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(deviceNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(deviceNameLabel))
                                        .addComponent(addDeviceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(addDevicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(deviceCapacityLabel)
                                        .addComponent(devicePriceLabel)
                                        .addComponent(deviceCapacitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(devicePriceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout manualStorageCreationPanelLayout = new javax.swing.GroupLayout(manualStorageCreationPanel);
        manualStorageCreationPanel.setLayout(manualStorageCreationPanelLayout);
        manualStorageCreationPanelLayout.setHorizontalGroup(
                manualStorageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addDevicePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeDevicePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        manualStorageCreationPanelLayout.setVerticalGroup(
                manualStorageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(manualStorageCreationPanelLayout.createSequentialGroup()
                                .addComponent(addDevicePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeDevicePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        autoStorageCreationPanel.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderHighlight"));
        autoStorageCreationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Auto"));
        autoStorageCreationPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        storageSizeLabel.setText("Size:");

        minCapacityLabel.setText("Min Capacity:");

        minPriceLabel.setText("Min Price:");

        maxCapacityLabel.setText("Max Capacity:");

        maxPriceLabel.setText("Max Price:");

        generateStorageButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.highlight"));
        generateStorageButton.setText("Generate");
        generateStorageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateStorageButtonActionPerformed(evt);
            }
        });

        maxCapacitySpinner.setModel(new javax.swing.SpinnerNumberModel(100.0d, null, null, 1.0d));

        minPriceSpinner.setModel(new javax.swing.SpinnerNumberModel(10.0d, null, null, 1.0d));

        maxPriceSpinner.setModel(new javax.swing.SpinnerNumberModel(100.0d, null, null, 1.0d));

        minCapacitySpinner.setModel(new javax.swing.SpinnerNumberModel(10.0d, null, null, 1.0d));

        storageSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(10, null, null, 1));

        javax.swing.GroupLayout autoStorageCreationPanelLayout = new javax.swing.GroupLayout(autoStorageCreationPanel);
        autoStorageCreationPanel.setLayout(autoStorageCreationPanelLayout);
        autoStorageCreationPanelLayout.setHorizontalGroup(
                autoStorageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(autoStorageCreationPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(autoStorageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(generateStorageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(autoStorageCreationPanelLayout.createSequentialGroup()
                                                .addGroup(autoStorageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(autoStorageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(autoStorageCreationPanelLayout.createSequentialGroup()
                                                                        .addGroup(autoStorageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addComponent(maxPriceLabel)
                                                                                .addComponent(minPriceLabel))
                                                                        .addGap(25, 25, 25))
                                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, autoStorageCreationPanelLayout.createSequentialGroup()
                                                                        .addComponent(maxCapacityLabel)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                                        .addGroup(autoStorageCreationPanelLayout.createSequentialGroup()
                                                                .addGroup(autoStorageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(minCapacityLabel)
                                                                        .addComponent(storageSizeLabel))
                                                                .addGap(14, 14, 14)))
                                                .addGroup(autoStorageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(storageSizeSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                                        .addComponent(minPriceSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(minCapacitySpinner, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(maxCapacitySpinner)
                                                        .addComponent(maxPriceSpinner, javax.swing.GroupLayout.Alignment.LEADING))))
                                .addContainerGap())
        );
        autoStorageCreationPanelLayout.setVerticalGroup(
                autoStorageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(autoStorageCreationPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(autoStorageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(minCapacityLabel)
                                        .addComponent(minCapacitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(autoStorageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(maxCapacitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(maxCapacityLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(autoStorageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(maxPriceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(maxPriceLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                                .addGroup(autoStorageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(minPriceLabel)
                                        .addComponent(minPriceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(autoStorageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(storageSizeLabel)
                                        .addComponent(storageSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(generateStorageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        javax.swing.GroupLayout storageCreationPanelLayout = new javax.swing.GroupLayout(storageCreationPanel);
        storageCreationPanel.setLayout(storageCreationPanelLayout);
        storageCreationPanelLayout.setHorizontalGroup(
                storageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(storageCreationPanelLayout.createSequentialGroup()
                                .addComponent(manualStorageCreationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(autoStorageCreationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        storageCreationPanelLayout.setVerticalGroup(
                storageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(storageCreationPanelLayout.createSequentialGroup()
                                .addGroup(storageCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(autoStorageCreationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(manualStorageCreationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        networkVisualizationPanel.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderHighlight"));
        networkVisualizationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Network"));
        networkVisualizationPanel.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout networkVisualizationPanelLayout = new javax.swing.GroupLayout(networkVisualizationPanel);
        networkVisualizationPanel.setLayout(networkVisualizationPanelLayout);
        networkVisualizationPanelLayout.setHorizontalGroup(
                networkVisualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 425, Short.MAX_VALUE)
        );
        networkVisualizationPanelLayout.setVerticalGroup(
                networkVisualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );

        logPanel.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderHighlight"));
        logPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Log"));

        logTextArea.setColumns(20);
        logTextArea.setLineWrap(true);
        logTextArea.setRows(5);
        logScrollPane.setViewportView(logTextArea);

        javax.swing.GroupLayout logPanelLayout = new javax.swing.GroupLayout(logPanel);
        logPanel.setLayout(logPanelLayout);
        logPanelLayout.setHorizontalGroup(
                logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(logPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(logScrollPane)
                                .addContainerGap())
        );
        logPanelLayout.setVerticalGroup(
                logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(logPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(logScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                                .addContainerGap())
        );

        networkCreationPanel.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderHighlight"));
        networkCreationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Network Creation"));

        manualNetworkCreationPanel.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderHighlight"));
        manualNetworkCreationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Manual"));

        addLinkPanel.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderHighlight"));
        addLinkPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Add Link"));

        neALabel.setText("NE A:");

        neAComboBox.setToolTipText("");

        addLinkButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.highlight"));
        addLinkButton.setText("Add");
        addLinkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLinkButtonActionPerformed(evt);
            }
        });

        neZLabel.setText("NE Z:");

        neZComboBox.setToolTipText("");

        isDuplexCheckBox.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderHighlight"));
        isDuplexCheckBox.setText("Is Duplex");

        javax.swing.GroupLayout addLinkPanelLayout = new javax.swing.GroupLayout(addLinkPanel);
        addLinkPanel.setLayout(addLinkPanelLayout);
        addLinkPanelLayout.setHorizontalGroup(
                addLinkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addLinkPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(addLinkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(addLinkPanelLayout.createSequentialGroup()
                                                .addComponent(neZLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(neZComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(addLinkPanelLayout.createSequentialGroup()
                                                .addComponent(neALabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(neAComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(addLinkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(addLinkButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(isDuplexCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                                .addContainerGap())
        );
        addLinkPanelLayout.setVerticalGroup(
                addLinkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addLinkPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(addLinkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(addLinkPanelLayout.createSequentialGroup()
                                                .addGroup(addLinkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(neALabel)
                                                        .addComponent(neAComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(addLinkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(neZLabel)
                                                        .addComponent(neZComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(isDuplexCheckBox)))
                                        .addComponent(addLinkButton)))
        );

        addNetworkElementPanel.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderHighlight"));
        addNetworkElementPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Add Network Element"));

        neTypeLabel.setText("NE Type:");

        neCapacityLabel.setText("Capacity:");

        neNameLabel.setText("Name:");

        addNetworkElementButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.highlight"));
        addNetworkElementButton.setText("Add");
        addNetworkElementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNetworkElementButtonActionPerformed(evt);
            }
        });

        neTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Root", "User", "Switch", "Empty Element"}));

        neCapacitySpinner.setModel(new javax.swing.SpinnerNumberModel(20.0d, null, null, 1.0d));

        javax.swing.GroupLayout addNetworkElementPanelLayout = new javax.swing.GroupLayout(addNetworkElementPanel);
        addNetworkElementPanel.setLayout(addNetworkElementPanelLayout);
        addNetworkElementPanelLayout.setHorizontalGroup(
                addNetworkElementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addNetworkElementPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(addNetworkElementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(addNetworkElementPanelLayout.createSequentialGroup()
                                                .addComponent(neTypeLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(neTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(addNetworkElementPanelLayout.createSequentialGroup()
                                                .addComponent(neCapacityLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(neCapacitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(neNameLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(neNameTextField)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addNetworkElementButton))
        );
        addNetworkElementPanelLayout.setVerticalGroup(
                addNetworkElementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addNetworkElementPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(addNetworkElementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(addNetworkElementPanelLayout.createSequentialGroup()
                                                .addGroup(addNetworkElementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(neTypeLabel)
                                                        .addComponent(neTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(addNetworkElementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(neCapacityLabel)
                                                        .addComponent(neNameLabel)
                                                        .addComponent(neNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(neCapacitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(addNetworkElementButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout manualNetworkCreationPanelLayout = new javax.swing.GroupLayout(manualNetworkCreationPanel);
        manualNetworkCreationPanel.setLayout(manualNetworkCreationPanelLayout);
        manualNetworkCreationPanelLayout.setHorizontalGroup(
                manualNetworkCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(manualNetworkCreationPanelLayout.createSequentialGroup()
                                .addGroup(manualNetworkCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(addLinkPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(addNetworkElementPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 2, Short.MAX_VALUE))
        );
        manualNetworkCreationPanelLayout.setVerticalGroup(
                manualNetworkCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(manualNetworkCreationPanelLayout.createSequentialGroup()
                                .addComponent(addNetworkElementPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addLinkPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        autoNetworkCreationPanel.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderHighlight"));
        autoNetworkCreationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Auto"));

        layersCountLabel.setText("Layer's Count:");

        neMinPriceLabel.setText("Root Min Cap:");

        layerLengthLabel.setText("Layer Length:");

        neMaxCapacityLabel.setText("Root Max Cap:");

        generateNetworkButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.highlight"));
        generateNetworkButton.setText("Generate");
        generateNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateNetworkButtonActionPerformed(evt);
            }
        });

        layersCountSpinner.setModel(new javax.swing.SpinnerNumberModel(10, null, null, 1));

        layerSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(10, null, null, 1));

        neMaxPriceSpinner.setModel(new javax.swing.SpinnerNumberModel(10.0d, null, null, 1.0d));

        neMinPriceSpinner.setModel(new javax.swing.SpinnerNumberModel(10.0d, null, null, 1.0d));

        javax.swing.GroupLayout autoNetworkCreationPanelLayout = new javax.swing.GroupLayout(autoNetworkCreationPanel);
        autoNetworkCreationPanel.setLayout(autoNetworkCreationPanelLayout);
        autoNetworkCreationPanelLayout.setHorizontalGroup(
                autoNetworkCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(autoNetworkCreationPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(autoNetworkCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(generateNetworkButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(autoNetworkCreationPanelLayout.createSequentialGroup()
                                                .addGroup(autoNetworkCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(neMaxCapacityLabel)
                                                        .addComponent(layerLengthLabel)
                                                        .addComponent(neMinPriceLabel)
                                                        .addComponent(layersCountLabel))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(autoNetworkCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(layersCountSpinner)
                                                        .addComponent(layerSizeSpinner, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(neMaxPriceSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                                        .addComponent(neMinPriceSpinner, javax.swing.GroupLayout.Alignment.TRAILING))))
                                .addContainerGap())
        );
        autoNetworkCreationPanelLayout.setVerticalGroup(
                autoNetworkCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(autoNetworkCreationPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(autoNetworkCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(layersCountLabel)
                                        .addComponent(layersCountSpinner))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(autoNetworkCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(layerSizeSpinner)
                                        .addComponent(layerLengthLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(autoNetworkCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(neMaxPriceSpinner)
                                        .addComponent(neMaxCapacityLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(autoNetworkCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(neMinPriceSpinner)
                                        .addComponent(neMinPriceLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(generateNetworkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout networkCreationPanelLayout = new javax.swing.GroupLayout(networkCreationPanel);
        networkCreationPanel.setLayout(networkCreationPanelLayout);
        networkCreationPanelLayout.setHorizontalGroup(
                networkCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(networkCreationPanelLayout.createSequentialGroup()
                                .addComponent(manualNetworkCreationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(autoNetworkCreationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        networkCreationPanelLayout.setVerticalGroup(
                networkCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(networkCreationPanelLayout.createSequentialGroup()
                                .addGroup(networkCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(autoNetworkCreationPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(manualNetworkCreationPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(storageCreationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(networkCreationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(networkVisualizationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(logPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(13, 13, 13))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(storageCreationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(networkCreationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(networkVisualizationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(logPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("networkPanel");
    }// </editor-fold>//GEN-END:initComponents

    private void addDeviceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDeviceButtonActionPerformed
        if (UIValidator.getInstance().validate(logger, deviceNameTextField, deviceCapacitySpinner, devicePriceSpinner)) {
            Device device = new Device(
                    deviceNameTextField.getText(),
                    Double.valueOf(deviceCapacitySpinner.getValue().toString()),
                    Double.valueOf(devicePriceSpinner.getValue().toString()));
            storage.addElement(device);
            removeDeviceComboBox.addItem(device.toString());
            logger.trace("Device is added successfully");
        }
    }//GEN-LAST:event_addDeviceButtonActionPerformed

    private void removeDeviceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDeviceButtonActionPerformed
        if (UIValidator.getInstance().validate(logger, removeDeviceComboBox)) {
            storage.removeElement(removeDeviceComboBox.getSelectedIndex());
            int indexToRemove = removeDeviceComboBox.getSelectedIndex();
            removeDeviceComboBox.removeItemAt(indexToRemove);
            logger.trace("Device is removed");
        }
    }//GEN-LAST:event_removeDeviceButtonActionPerformed

    private void addNetworkElementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNetworkElementButtonActionPerformed
        if (UIValidator.getInstance().validate(logger, neTypeComboBox, neCapacitySpinner, neNameTextField)) {
            NetworkElement element = null;
            switch (neTypeComboBox.getSelectedItem().toString()) {
                case "Root": {
                    element = new RootNetworkElement(neNameTextField.getText(), Double.valueOf(neCapacitySpinner.getValue().toString()));
                    network.addRoot(element);
                    break;
                }
                case "User": {
                    element = new UserNetworkElement(neNameTextField.getText(), Double.valueOf(neCapacitySpinner.getValue().toString()));
                    network.addUser(element);
                    break;
                }
                case "Switch": {
                    element = new SwitchNetworkElement(
                            neNameTextField.getText(),
                            Double.valueOf(neCapacitySpinner.getValue().toString()),
                            100
                    );
                    network.addSwitch(element);
                    break;
                }
                case "Empty Element": {
                    element = new EmptyElement();
                    network.addEmptyElement(element);
                    break;
                }
            }
            logger.trace("NE is added successfully");
            UIVisualizator.getInstance().paintGraph(network, networkVisualizationPanel);
            neAComboBox.addItem(element.toString()); 
            neZComboBox.addItem(element.toString());
        }
    }//GEN-LAST:event_addNetworkElementButtonActionPerformed

    private void addLinkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLinkButtonActionPerformed
        if (UIValidator.getInstance().validate(logger, neAComboBox, neZComboBox)) {
            if (neAComboBox.getSelectedIndex() == neZComboBox.getSelectedIndex()) {
                logger.trace("Loop is not available");
            } else {
                network.addLink(
                        new DoubleLink(isDuplexCheckBox.isSelected(), 0.0, 0.0, 0.0),
                        neAComboBox.getSelectedIndex(),
                        neZComboBox.getSelectedIndex()
                );
                logger.trace("Link is added successfully");
                UIVisualizator.getInstance().paintGraph(network, networkVisualizationPanel);
            }
        }
    }//GEN-LAST:event_addLinkButtonActionPerformed

    private void generateNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateNetworkButtonActionPerformed
        if (UIValidator.getInstance().validate(logger, layerSizeSpinner, layersCountSpinner, neMinPriceSpinner, neMaxPriceSpinner)) {
            NetworkController.generateNetwork(network,
                    Integer.valueOf(layerSizeSpinner.getValue().toString()),
                    Integer.valueOf(layersCountSpinner.getValue().toString()),
                    Double.valueOf(neMinPriceSpinner.getValue().toString()),
                    Double.valueOf(neMaxPriceSpinner.getValue().toString())
            );
            if (network.getSize() < 10) {
                UIVisualizator.getInstance().paintGraph(network, networkVisualizationPanel);
            }
            logger.trace("Network is generated successfully");
        }
    }//GEN-LAST:event_generateNetworkButtonActionPerformed

    private void generateStorageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateStorageButtonActionPerformed
        if (UIValidator.getInstance().validate(logger, storageSizeSpinner, minCapacitySpinner, maxCapacitySpinner, minPriceSpinner, maxPriceSpinner)) {
            StorageController.getInstance().generateStorage(storage,
                    Integer.valueOf(storageSizeSpinner.getValue().toString()),
                    Double.valueOf(minCapacitySpinner.getValue().toString()),
                    Double.valueOf(maxCapacitySpinner.getValue().toString()),
                    Double.valueOf(minPriceSpinner.getValue().toString()),
                    Double.valueOf(maxPriceSpinner.getValue().toString())
            );
            logger.trace("Storage is generated successfully");
        }
    }//GEN-LAST:event_generateStorageButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDeviceButton;
    private javax.swing.JPanel addDevicePanel;
    private javax.swing.JButton addLinkButton;
    private javax.swing.JPanel addLinkPanel;
    private javax.swing.JButton addNetworkElementButton;
    private javax.swing.JPanel addNetworkElementPanel;
    private javax.swing.JPanel autoNetworkCreationPanel;
    private javax.swing.JPanel autoStorageCreationPanel;
    private javax.swing.JLabel deviceCapacityLabel;
    private javax.swing.JSpinner deviceCapacitySpinner;
    private javax.swing.JLabel deviceNameLabel;
    private javax.swing.JTextField deviceNameTextField;
    private javax.swing.JLabel devicePriceLabel;
    private javax.swing.JSpinner devicePriceSpinner;
    private javax.swing.JButton generateNetworkButton;
    private javax.swing.JButton generateStorageButton;
    private javax.swing.JCheckBox isDuplexCheckBox;
    private javax.swing.JLabel layerLengthLabel;
    private javax.swing.JSpinner layerSizeSpinner;
    private javax.swing.JLabel layersCountLabel;
    private javax.swing.JSpinner layersCountSpinner;
    private javax.swing.JPanel logPanel;
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JPanel manualNetworkCreationPanel;
    private javax.swing.JPanel manualStorageCreationPanel;
    private javax.swing.JLabel maxCapacityLabel;
    private javax.swing.JSpinner maxCapacitySpinner;
    private javax.swing.JLabel maxPriceLabel;
    private javax.swing.JSpinner maxPriceSpinner;
    private javax.swing.JLabel minCapacityLabel;
    private javax.swing.JSpinner minCapacitySpinner;
    private javax.swing.JLabel minPriceLabel;
    private javax.swing.JSpinner minPriceSpinner;
    private javax.swing.JComboBox<String> neAComboBox;
    private javax.swing.JLabel neALabel;
    private javax.swing.JLabel neCapacityLabel;
    private javax.swing.JSpinner neCapacitySpinner;
    private javax.swing.JLabel neMaxCapacityLabel;
    private javax.swing.JSpinner neMaxPriceSpinner;
    private javax.swing.JLabel neMinPriceLabel;
    private javax.swing.JSpinner neMinPriceSpinner;
    private javax.swing.JLabel neNameLabel;
    private javax.swing.JTextField neNameTextField;
    private javax.swing.JComboBox<String> neTypeComboBox;
    private javax.swing.JLabel neTypeLabel;
    private javax.swing.JComboBox<String> neZComboBox;
    private javax.swing.JLabel neZLabel;
    private javax.swing.JPanel networkCreationPanel;
    private javax.swing.JPanel networkVisualizationPanel;
    private javax.swing.JButton removeDeviceButton;
    private javax.swing.JComboBox<String> removeDeviceComboBox;
    private javax.swing.JLabel removeDeviceLabel;
    private javax.swing.JPanel removeDevicePanel;
    private javax.swing.JPanel storageCreationPanel;
    private javax.swing.JLabel storageSizeLabel;
    private javax.swing.JSpinner storageSizeSpinner;
    // End of variables declaration//GEN-END:variables
}
